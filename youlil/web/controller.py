#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Created on 2012-11-11

@author: cqy
'''
import web
from web.contrib.template import render_jinja
from weibo import APIClient
from model import *
import hashlib
import logging


render = render_jinja(
        searchpath='./templates', #''.join( [root_path,'templates']),   # Set template directory.
        encoding='utf-8', # Encoding.
        )

SITE_URL="110.76.40.188:8080"


def logged():
    if web.ctx.session.login == 1:
        return True
    else:
        return False
    
def autoincrease_field(name):
    res=web.ctx.db.eval('db.runCommand({"findandmodify":"autoincrease","query":{"_id":"%s"},"update":{"$inc":{"seq":1}}})' %name)
    return res['value']['seq']

def password_generate(password):
    return hashlib.sha1("cqy'sXiaoGuiKer"+password).hexdigest()

class Login:
    def GET(self):
        if logged():
            return web.seeother('/myindex')
            #render = self.create_render()
            #return '%s' % render.login_double()
        else:
            email,password=web.input().email,web.input().password
            user,vali=self._validate(email, password)          
            if vali:
                web.ctx.session.login=1
                web.ctx.session.usermodel['user_id']=user['_id']
                web.ctx.session.usermodel['username']=user['username']
                print web.ctx.session.usermodel
                return web.seeother('/myindex')
            else:
                web.ctx.session.login=0
                return "login error"  
            
          
    def _validate(self,email,password):  
        user=web.ctx.db["user"].find_one({'email':email})
        return user,True if email and password and user and password_generate(password)==user['password'] else False
                 
        
    
    def _login_render(self,method):
        if method == "xiaogui":
            return render.login()
        elif method == "weibo":
            pass
        elif method == "qq":
            pass
        else:
            return render.login()

class Register:
    def GET(self):
        param=self._init_param()
        return render.register(**param)
    
    def POST(self):
        email,username,password=web.input().email,web.input().username,web.input().password
        if self._validate(email,password):
            user_id=autoincrease_field("user_id")
            web.ctx.db["user"].insert({"_id":user_id,"email":email,"username":username,"password":password_generate(password)})
            web.ctx.session.usermodel['user_id']=user_id
            web.ctx.session.usermodel['username']=username
            return web.seeother('/myindex')
        else:
            return "Error,email or password is null or email is existed."
        
    def _init_param(self):
        param={'site':SITE_URL,'css':'register.css','title':'xiaoguiker'}
        return param
    
    def _validate(self,email,password):        
        return True if email and email!="" and password and password!="" and not web.ctx.db["user"].find_one({'email':email}) else False

class Logout:
    def GET(self):
        web.ctx.session.login=0
        return web.seeother('/')
    
"""
    index of the learner
        this is actually a welcome page.
    The elements:
            login windows (weibo at present)
            the hottest news today
"""
class Index:
    def _init_param(self,art_list=None):
        param={'site':SITE_URL,'css':'index.css','title':'xiaoguiker',"art_list":art_list}
        return param
    
    def GET(self):        
        param=self._init_param()
        return render.index(**param)


"""
    myindex page
        It's a personally page generated by recommendation system.
        Main section contains a list of items
        Side bar is made up of some personally information.
"""
            
class MyIndex:
    rec=Recommender()
    def _init_param(self,arts,user):
        param={'site':SITE_URL,'css':'article.css','title':'xiaoguiker',"arts":arts,"user":user}
        return param
    
    def GET(self):
        if logged():
            user=User(web.ctx.session.usermodel)
            arts=MyIndex.rec.random_rec()
            param=self._init_param(arts,user)
            return render.myindex(**param)
        else:
            web.seeother('/')
        
    
    def POST(self):
        pass
    

"""
    article page
        main section contains title,link,description,content.
        side bar contains user info and word list
"""
class Article:
    ag=Article_Generator()
    def _init_param(self,art,user):
        param={'site':SITE_URL,'css':'article.css','title':'xiaoguiker',"art":art,"user":user}
        return param
    
    def GET(self):
        if logged():
            art_id=web.input().art
            if art_id:
                art=Article.ag.get_full_text(art_id)
                user=User(web.ctx.session.usermodel)
                #update user model
                web.ctx.queue.put({'type':'click',
                                          'user_id':user['user_id'],
                                          'art_id':art_id,
                                          'rss_id':art['rss_id']
                                           })               
                param=self._init_param(art,user)
                return render.article(**param)
            else:
                return "error"
        else:
            return web.seeother("/")
    
    
        
    
class Feedback:
    def GET(self):
        return "Hello!"

    def POST(self):
        web.ctx.queue.put({'type':'feedback',
                                   'user_id':web.ctx.session.usermodel['user_id'],
                                   'art_id':web.input().art_id,
                                   'i_score':web.input().i_score,
                                   'h_score':web.input().h_score
                                   })
        
        #print 'userid: %s  i_socre: %s  h_socre: %s' %(web.ctx.session.usermodel['userid'],web.input().i_score,web.input().h_score)
        return 'submit success. Interest:%s\tHardness:%s' %(web.input().i_score,web.input().h_score)
        
"""
    mywords page
"""
class MyWords:
    def GET(self):
        pass
    
    def POST(self):
        pass
    
"""
    error page
""" 
class Error:
    def GET(self):
        info = web.ctx.session.get('info','')
        param={'site':SITE_URL,'css':'error.css','title':'微博故事','info':info}
        return render.error(**param)

